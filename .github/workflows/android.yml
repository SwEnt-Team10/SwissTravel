name: SwissTravel CI - Test Runner

# Run the workflow when commits are pushed on main or when a PR is modified
on:
  push:
    branches:
      - main

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  bootcamp-ci:
    name: CI-SwissTravel
    runs-on: ubuntu-latest
    env:
      app_name: SwissTravelDebug

    defaults:
      run:
        working-directory: ./${{ env.base_folder }}

    steps:
      # First step : Checkout the repository on the runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      # This step removes the current gradle cache to avoid any caching issues
      - name: Remove current gradle cache
        run: rm -rf ~/.gradle

      # Kernel-based Virtual Machine (KVM) is an open source virtualization technology built into Linux. Enabling it allows the Android emulator to run faster.
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Caching is a very useful part of a CI, as a workflow is executed in a clean environement every time,
      # this means that one would need to re-download and re-process gradle files for every run. Which is very time consuming.
      #
      # To avoid that, we cache the the gradle folder to reuse it later.
      - name: Retrieve gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

      # Load google-services.json and local.properties from the secrets
      - name: Decode secrets
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
          LOCAL_PROPERTIES: ${{ secrets.LOCAL_PROPERTIES }}
          MAP_BOX_SECRET: ${{ secrets.MAP_BOX_SECRET }}
        run: |
          if [ -n "$GOOGLE_SERVICES" ]; then
            echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          else
            echo "::warning::GOOGLE_SERVICES secret is not set."
          fi
          
          if [ -n "$LOCAL_PROPERTIES" ]; then
            echo "$LOCAL_PROPERTIES" | base64 --decode > ./local.properties
          else
            echo "::warning::LOCAL_PROPERTIES secret is not set. local.properties will not be created."
          fi
          
          if [ -n "$MAP_BOX_SECRET" ]; then
            echo "$MAP_BOX_SECRET" | base64 --decode > ./app/src/main/res/values/developer-config.xml
          else
            echo "::warning::MAP_BOX_SECRET secret is not set. developper-config.xml will not be created."
          fi

      - name: Grant execute permission for gradlew
        run: |
          chmod +x ./gradlew

      # Install NodeJS
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Install Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: KTFmt Check
        run: |
          # To run the CI with debug informations, add --info
          ./gradlew ktfmtCheck

      # This step runs gradle commands to build the application
      - name: Assemble
        run: |
          # To run the CI with debug information, add --info
          ./gradlew assembleDebug lint --parallel --build-cache

      - name: Run tests
        run: |
          # To run the CI with debug information, add --info
          ./gradlew check --parallel --build-cache

      # Start Firebase emulators for instrumentation tests
      - name: Start Firebase emulators
        run: |
          if [ -e "firebase.json" ] && jq -e '.emulators' firebase.json >/dev/null; then
            echo "Starting Firebase emulators for instrumentation tests..."
            firebase emulators:start --only auth,firestore --project demo-project &
            echo "Firebase emulators started"
          else
            echo "Firebase emulators not configured, skipping emulator startup..."
          fi

      - name: Run instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          avd-name: github
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -skin 1080x2400
          disable-animations: true
          script: ./gradlew connectedCheck --parallel --build-cache

      # Upload the test results to the artifacts
      - name: Upload Test Results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
            name: test-results
            path: app/build/reports/androidTests/connected/debug/
            retention-days: 1

      # This step generates the coverage report which will be used later in the semster for monitoring purposes
      - name: Generate Coverage Report
        run: |
          ./gradlew jacocoTestReport

      # Upload the coverage report to the artifacts
      - name: Upload Jacoco Test Report
        uses: actions/upload-artifact@v4
        with:
          name: jacocoTestReport
          path: app/build/reports/jacoco/jacocoTestReport/


      # Upload the various reports to sonar
      - name: Upload report to SonarCloud
        env:
          {{ gradlew sonar --parallel --build-cache -Dsonar.coverage.exclusionsOnCoverageTypeKEN }}
        run: ./gradlew sonar --parallel --build-cache -Dsonar.coverage.exclusionsOnCoverageType=branch
